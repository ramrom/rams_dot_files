#!/bin/bash

# setopt NO_NOMATCH  #needed if this was zsh

. ~/rams_dot_files/shell_core_tools.sh || { echo "could not find shell_core_tools.sh" && exit 1; }

caller=$0 cmds_defined nvidia-smi || exit 1

# assuming celcius
tmux_temp_color () {
    [ $1 -gt 80 ] && echo "#[bg=colour124,fg=colour231] $1 #[default]" && return 0
    [ $1 -gt 65 ] && echo "#[fg=colour198]$1#[default]" && return 0
    [ $1 -gt 55 ] && echo "#[fg=colour208]$1#[default]" && return 0
    [ $1 -gt 45 ] && echo "#[fg=colour190]$1#[default]" && return 0
    echo "#[fg=colour083]$1#[default]"
}

tmux_percent_usage_color () {
    [ -z "$skip_verify" ] && { verify_percent $1 "$2" || return 1; }

    [ $1 -gt 95 ] && echo "#[bg=colour124,fg=colour231] $1 #[default]%%" && return 0
    [ $1 -gt 80 ] && echo "#[fg=colour198] $1#[default]%%" && return 0
    [ $1 -gt 40 ] && echo "#[fg=colour208] $1#[default]%%" && return 0
    [ $1 -gt 10 ] && echo "#[fg=colour190] $1#[default]%%" && return 0
    echo "#[fg=colour083] $1#[default]%%"
}

verify_percent () {
    if [ -z $(echo $1 | grep -E "^[[:digit:]]*$") ]; then
        echo "$(tput setaf 1) val: $2: must be a positive integer!" && return 1
    fi
    [ $1 -lt 0 -o $1 -gt 100 ] && echo "$(tput setaf 1)val $2: must be between 0 and 100!" && return 1
    return 0
}

# NOTE: hyperfine says nvidia-smi takes ~40ms, so refresh less frequent
linux_nvidia () {
    nvid=$(nvidia-smi)
    echo "$nvid" | sed -n '10p'   # the 10th line has most of the info we want
}

cpu_legend_color="fg=colour242"
cpu=$(skip_verify=1 tmux_percent_usage_color $(uptime-loadave) "uptimeload")
status_line1="#[$cpu_legend_color]Uptime-1min:#[default]$cpu"
if [ "$(uname)" == "Linux" ]; then
    s=$(sensors)

    #### CPU Stats
    cpufan=$(echo "$s" | grep -E "CPU Fan" | awk '{print $3;}') # | grep --color=never -Eoi '[0-9]+.[0-9]+'
    cputemp=$(echo "$s" | grep -E "CPU Temperature" | awk '{print $3;}')
    cputemp_num=$(echo $cputemp | sed 's/+//g' | grep --color=never -Eo '^[0-9]+')
    cputemp_color=$(tmux_temp_color $cputemp_num)
    status_line1="$status_line1 #[$cpu_legend_color]CPU-Temp:#[default] #[fg=green]$cputemp_color#[default]C"
    status_line1="$status_line1 #[$cpu_legend_color]CPU-Fan:#[default] #[fg=green]$cpufan#[default]"
    status_line1="$status_line1 #[fg=colour184]|#[default]"


    ##### System Memory Stats
    sys_mem=$(free -g | sed -n '2p')
    sys_mem_total=$(echo "$sys_mem" | awk '{print $2}')
    sys_mem_used=$(echo "$sys_mem" | awk '{print $3}')
    sys_mem_free=$(echo "$sys_mem" | awk '{print $4}')
    sys_mem_buf=$(echo "$sys_mem" | awk '{print $6}')
    status_line1="$status_line1 #[$cpu_legend_color]Sys-Mem(GiB)[free-used-buf/total]#[default]"
    sys_mem_usg=$(($sys_mem_used * 100 / $sys_mem_total))
    sys_mem_col=040; [ "$sys_mem_usg" -gt 50 ] && sys_mem_col=208; [ "$sys_mem_usg" -gt 90 ] && sys_mem_col=196
    status_line1="$status_line1 #[fg=colour$sys_mem_col] $sys_mem_free - $sys_mem_used - $sys_mem_buf#[default]"
    status_line1="$status_line1 #[fg=colour007] / $sys_mem_total#[default]"
    status_line1="$status_line1 #[fg=colour184]|#[default]"


    #### GPU Stats
    stats=$(linux_nvidia)
    gpu_temp=$(echo $stats | awk '{print $3}' | sed 's/.$//')
    gputemp_color=$(tmux_temp_color $gpu_temp)

    # gpu_mem=$(echo $stats | awk '{print $9 $10 $11}')     # simple and no coloring
    gpu_mem_total=$(echo $stats | awk '{print $11}' | sed 's/...$//g')  # TODO: total never changes, memoize this somehow
    gpu_mem_total_col="#[fg=colour007]$gpu_mem_total#[default]"
    gpu_mem_used=$(echo $stats | awk '{print $9}' | sed 's/...$//g')
    gpu_mem_usg=$(($gpu_mem_used * 100 / $gpu_mem_total))
    gpu_col=040; [ "$gpu_mem_usg" -gt 50 ] && gpu_col=208; [ "$gpu_mem_usg" -gt 90 ] && gpu_col=196
    gpu_mem_used_col="#[fg=colour$gpu_col]$gpu_mem_used#[default]"
    gpu_mem="$gpu_mem_used_col / $gpu_mem_total_col"

    gpu_fan=$(echo $stats | awk '{print $2}' | sed 's/.$//g')
    gpu_fan_color=$(tmux_percent_usage_color $gpu_fan "gpu fan")

    gpu_util=$(echo $stats | awk '{print $13}' | sed 's/.$//')
    gpu_util_color=$(tmux_percent_usage_color $gpu_util "gpu util")

    gpu_legend_color="fg=colour058"
    status_line1="$status_line1 #[$gpu_legend_color]GPU-Temp:#[default] #[fg=green]$gputemp_color#[default]C"
    status_line1="$status_line1 #[$gpu_legend_color]GPU-Util:#[default]$gpu_util_color"
    status_line1="$status_line1 #[$gpu_legend_color]GPU-Mem(MiB):#[default] $gpu_mem"
    status_line1="$status_line1 #[$gpu_legend_color]GPU-Fan:#[default]$gpu_fan_color"
fi
tmux set status-format[1] "$status_line1"





################## WIP #################################

# TODO: tput cols x lines with tput reports 80 x 25, the default, in reality i have it set to 135
# NOTE: could call `tmux list-windows -t session_name`, and extract the dimenisons
    # this is needed for rendering the progress bars
# tmux set status-format[1] "#[align=left,fg=red]#(tput cols; tput lines)"

# s=$(tmux display-message -p '#S')
# tmux list-windows -F "#{window_width}" -t $s 2>&1
# width=$(tmux list-windows -F "#{window_width}" 2>&1 | head -n 1)

# 2520 is least common multiple of all integers from 1-10
counter=$(tmux show -v @status-bar-interval-counter)
tmux set -q @status-bar-interval-counter $(( ($counter + 1) % 2520 ))

function local_bar_width() {
    #determine bar width, default to 100% of column width of viewport
    local percentage_of_window=100
    if [ -n "$1" ]; then
        verify_percent $1 "window width percentage" || return 1
        percentage_of_window=$1
    fi
    echo "$(tput cols) * $percentage_of_window / 100" | bc
}

# ubuntu and osx uptime have diff format ofcourse
# $1 - timer name, $2 - percent (e.g. 50), $3 - bar width in chars
function tmux_render_progress_bar() {
    verify_percent $2 "task percentage done" || return 1
    local text="$2%% $1"  # arg 1 is descriptive name like "egg timer"
    local text_size=${#text}; local bar_width=$3
    if [ $text_size -gt $bar_width ]; then
        echo "#[fg=brightyellow,bg=red]error: $1 > $bar_width chars!" && return 1
    fi

    local num_white_space=$(($bar_width - $text_size))
    for (( i=1; i<=$num_white_space; i++ )); do
        text+=" "
    done

    local col=21; [ -n "$color" ] && col=$color

    local completed_width=$(($bar_width * $2 / 100 ))
    text="${text:0:$completed_width}#[bg=colour237]${text:$completed_width:${#text}}"
    text="#[fg=brightwhite,bg=colour$col]$text"

    # for (( i=1; i<=$uncompleted_width; i++ )); do
    #     printf "-"
    # done
    echo "$text#[default]"
}

# NOTE: default tmux status script shell is sh(3.2)
# TODO: diff format for secs and percent maybe?
function tmux_render_timer_bar() {
    local start=$(tmux show -v @$1-start)
    [ -z $start ] && echo "#[fg=brightred]$1 timer not found!" && return 1

    local now=$(date +%s)
    local duration=$(tmux show -v @$1-duration)
    local elapsed=$(( $now - $start ))
    local percent_done=$(( $elapsed * 100 / $duration ))
    # echo $percent_done

    if [ $percent_done -gt 100 ]; then
        local excess=$(( $elapsed - $duration ))
        local progbar=$(tmux_render_progress_bar \
            "⏰ $1 timer (${duration}s) - #[bg=red,underscore]!COMPLETED!#[bg=$color,nounderscore] ${excess}s ago" 100 100)
    else
        local progbar=$(tmux_render_progress_bar "⏰ $1 timer (${duration}s)" $percent_done 100)
    fi

    # NOTE: quotes needed to preserve spaces, otherwise sh/bash will interpret as args and compress
    echo "$progbar"
}

tmux_status_set_num_cpu () { tmux set -q "@tmux-status-num-cpu" $(sysctl -n hw.ncpu); }


###### STATUS ELEMENTS THAT REFRESH ON DIFFERENT INTERVALS
# foo=$(tmux_render_timer_bar eggs)
# if [ $(( $counter % 2 )) -eq 0 ]; then
#     tmux set status-format[1] "$(color=200 tmux_render_timer_bar eggs)"
#     # tmux set -a status-format[2] "*"
# fi

# if [ $(( $counter % 4 )) -eq 0 ]; then
#     tmux set -a status-format[3] "*"
# fi

# if [ $(( $counter % 8 )) -eq 0 ]; then
#     tmux set -a status-format[4] "*"
# fi
