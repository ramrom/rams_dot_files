#!/bin/zsh
# NOTE: need zsh just for the `fzf --header=$'line1\nline2'` to read the `\n` as a new line, dash in linux doesnt support it

# FF - Fzf on files in a dir with file prev
# actions: open, edit, cd to location, or add to clipboard

usage() { echo 'Usage: ff [ -h(help) ] [ -i(ignore-hidden-files) ] [ -k(set fd --no-ignore) ] [ -j FZF_HEIGHT ]'
          echo '          [ -t FILE_TYPE(d = dir-only, f = file-only, not specified means all) ]';
          echo '          [ -w(FUNC_WRAP) ] [ -d DEPTH ] BASE_DIR( `~` = home, no arg means cur dir)'; }

while getopts 'hikd:t:wj:' x; do
    case $x in
        h) usage && exit 1 ;;
        i) NO_HIDDEN_FILES=1 ;;
        k) IGNORE_IGNOREFILES=1 ;;
        t) FILE_TYPE="$OPTARG" ;;
        j) FZF_HEIGHT="$OPTARG" ;;
        d) DEPTH="$OPTARG" ;;
        w) FUNC_WRAP=1 ;;
        *) echo && usage && exit 1 ;;
    esac
done
shift $(($OPTIND - 1))

FDNAME="fd"; [ $(uname) = "Linux" ] && FDNAME="fdfind"
BATBIN="bat"; [ $(uname) = "Linux" ] && BATBIN='batcat'
OPENBIN="open"; [ $(uname) = "Linux" ] && OPENBIN='xdg-open'
FZF_HEIGHT=${FZF_HEIGHT:=100}


FZF_DEFAULT_COMMAND="$FDNAME --color=always --exclude .git"

IGFILE_OPT=""; [ -n "$IGNORE_IGNOREFILES" ] && IGFILE_OPT="--no-ignore"
FZF_DEFAULT_COMMAND="$FZF_DEFAULT_COMMAND $IGFILE_OPT"

HIDDEN_OPT="--hidden"; [ -n "$NO_HIDDEN_FILES" ] && HIDDEN_OPT=""
FZF_DEFAULT_COMMAND="$FZF_DEFAULT_COMMAND $HIDDEN_OPT"

FILE_OPT=""; 
[ "$FILE_TYPE" = "d" ] && FILE_OPT="--type d"
[ "$FILE_TYPE" = "f" ] && FILE_OPT="--type f"
FZF_DEFAULT_COMMAND="$FZF_DEFAULT_COMMAND $FILE_OPT"

DEPTH_OPT=""; [ -n "$DEPTH" ] && DEPTH_OPT="-d $DEPTH"
FZF_DEFAULT_COMMAND="$FZF_DEFAULT_COMMAND $DEPTH_OPT"

FZF_DEFAULT_COMMAND="$FZF_DEFAULT_COMMAND ."

BASE_DIR_OPT=""; [ -n "$1" ] && BASE_DIR_OPT="$@"
FZF_DEFAULT_COMMAND="$FZF_DEFAULT_COMMAND $BASE_DIR_OPT"

# echo "FZF_DEFAULT_COMMAND: $FZF_DEFAULT_COMMAND"

generate_github_link() {
    remote=$(git remote)
    [ -z "$remote" ] && echo "ERROR: git remote fails for file $1" && return 1

    url=$(git config remote.$remote.url)
    [ -z "$url" ] && echo "ERROR: git config fails for remote $remote" && return 1

    if echo "$url" | grep "^git@" > /dev/null; then
        # NOTE: this assumes a filepath or git remote base url doesnt have ":" elsewhere
        url=$(echo "$url" | sed 's/:/\//')
        url=$(echo "$url" | sed 's/^git@/https:\/\//')
    fi
    url=$(echo "$url" | sed 's/\.git$//')  # remote the trailing ".git" extension

    branch=$(git rev-parse --abbrev-ref HEAD)
    [ -z "$branch" ] && echo "ERROR: git branch failed" && return 1

    echo "$url/blob/$branch/$1"
}

# use tree to preview a dir structure, bat to preview a files contents
PREVIEW_CMD="if [ -d {} ]; then; tree -C {}; else $BATBIN --style=numbers --color=always {} | head -500; fi"

# TODO: make binding to open in GH without quitting fzf
    # --bind 'ctrl-y:execute-silent(echo {} | pbcopy)+abort,ctrl-\:execute(opengh "{}")' \
out=$(fzf --ansi +m --exit-0 --height "$FZF_HEIGHT"% \
    --header=$'enter->cd, ctrl-i->open, ctrl-o->vim, ctrl-y->pbcopy\nctrl-s->open-in-github ctrl-space->echo' \
    --bind 'ctrl-y:execute-silent(echo {} | pbcopy)+abort' \
    --expect='ctrl-o,ctrl-i,ctrl-space,ctrl-s' \
    --preview "$PREVIEW_CMD" \
    --preview-window=:wrap)
key=$(echo "$out" | head -1)
file=$(echo "$out" | tail -1)
if [ -n "$file" ]; then
    case "$key" in
        "ctrl-i") $OPENBIN "$file" ;;
        "ctrl-o")
            cmd="${EDITOR:-vim} '$file'"
            [ -z "$FUNC_WRAP" ] && eval "$cmd" && exit
            echo "$cmd" ;;
        "ctrl-s")
            [ -n "$1" ] && echo "ERROR: opening in github requires same dir to detect remote/branch" && exit 1
            generate_github_link "$file" > /dev/null || exit 1
            $OPENBIN "$(generate_github_link "$file")" ;;
        "ctrl-space")
            echo "$file" ;;
        *) 
            [ -z "$FUNC_WRAP" ] && echo "not wrapped in shell func, so cd to dir cant be supported!" && exit 1
            directoryname=$(dirname "$file")
            [ -d "$file" ] && directoryname="$file"  # dont get dirname if it's already a dir
            echo "cd $directoryname" ;;
    esac
fi
