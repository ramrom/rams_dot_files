#!/bin/sh

# FF - Fzf on files in a dir with file prev and open or edit or cd to or add to clipboard

usage () { echo 'Usage: ff [ -h(help) ] [ -j FZF_HEIGHT ] [ -w FUNC_WRAP ] BASE_DIR( `~` = home, no arg means cur dir)'; }

while getopts 'hwj:' x; do
    case $x in
        h) usage && exit 1 ;;
        j) FZF_HEIGHT="$OPTARG" ;;
        w) FUNC_WRAP=1 ;;
        *) usage && exit 1 ;;
    esac
done
shift $(($OPTIND - 1))

FDNAME="fd"; [ `uname` = "Linux" ] && FDNAME="fdfind"
[ $(uname) = "Linux" ] && alias open='xdg-open'
FZF_HEIGHT=${FZF_HEIGHT:=100}

if [ "$1" = "h" ]; then
    FZF_DEFAULT_COMMAND="$FDNAME --type f --hidden --exclude .git '.*' ~"
elif [ -n "$1" ]; then
    [ ! -d "$1" ] && echo "$1 not a dir!" && exit 1
    FZF_DEFAULT_COMMAND="$FDNAME --type f --hidden --exclude .git '.*' $1"
fi

generate_github_link() {
    remote=$(git remote)
    [ -z "$remote" ] && echo "ERROR: git remote fails for file $1" && return 1

    url=$(git config remote.$remote.url)
    [ -z "$url" ] && echo "ERROR: git config fails for remote $remote" && return 1

    if echo "$url" | grep "^git@" > /dev/null; then
        # NOTE: this assumes a filepath or git remote base url doesnt have ":" elsewhere
        url=$(echo "$url" | sed 's/:/\//')
        url=$(echo "$url" | sed 's/^git@/https:\/\//')
    fi
    url=$(echo "$url" | sed 's/\.git$//')  # remote the trailing ".git" extension

    branch=$(git rev-parse --abbrev-ref HEAD)
    [ -z "$branch" ] && echo "ERROR: git branch failed" && return 1

    echo "$url/blob/$branch/$1"
}

# TODO: make binding to open in GH without quitting fzf
    # --bind 'ctrl-y:execute-silent(echo {} | pbcopy)+abort,ctrl-\:execute(opengh "{}")' \
out=$(fzf +m --exit-0 --height "$FZF_HEIGHT"% \
    --header='ctrl-i->vim, ctrl-o->open, ctrl-space->cd, ctrl-y->pbcopy, ctrl-s->open-in-github' \
    --bind 'ctrl-y:execute-silent(echo {} | pbcopy)+abort' \
    --expect='ctrl-o,ctrl-i,ctrl-space,ctrl-s' \
    --preview 'bat --style=numbers --color=always {} | head -500' \
    --preview-window=:wrap)
key=$(echo "$out" | head -1)
file=$(echo "$out" | tail -1)
if [ -n "$file" ]; then
    case "$key" in
        "ctrl-o") open "$file" ;;
        "ctrl-space")
            [ -z "$FUNC_WRAP" ] && echo "not wrapped in shell func, so cd to dir cant be supported!" && exit 1
            echo "cd $(dirname "$file")" ;;
        "ctrl-i")
            cmd="${EDITOR:-vin} $file"
            [ -z "$FUNC_WRAP" ] && eval "$cmd" && exit
            echo "$cmd" ;;
        "ctrl-s")
            [ -n "$1" ] && echo "ERROR: opening in github requires same dir to detect remote/branch" && exit 1
            generate_github_link "$file" > /dev/null || exit 1
            open "$(generate_github_link "$file")" ;;
        *) echo "$file" ;;
    esac
fi
