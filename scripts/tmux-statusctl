#!/bin/sh

#####################################
# TMUX STATUS - customize and control a multi-line tmux status
#####################################

. ~/rams_dot_files/shell_core_tools.sh || { echo "could not find shell_core_tools.sh" && exit 1; }

caller=$0 cmds_defined tmux-version tmux-default-winlist tmux-status-render || exit 1

# set first line of tmux status for multi-line mode
tmux_main_status () {
    local left="$(tmux show -gv status-left)"
    local right="$(tmux show -gv status-right)"

    local cmd="tmux"
    [ "$(detect_shell)" = "zsh" ] && cmd="noglob tmux" # for zsh '[]' globbing

    eval "$cmd set status-format[0] \"#(tmux-status-render 2>&1)"\
    "#[align=left]$left #[align=centre]$(tmux-default-winlist) #[align=right]$right\""
}

tmux_status_reset () {
    tmux set -u status-format[0]
    tmux set -u status
    tmux set -u status-interval
    tmux set -u status-left; tmux set -u status-right
    tmux set -u status-format
}

ver=$(tmux-version)
[ $(echo "$ver < 2.9" | bc) -eq 1 ] && \
    echo "$(tput setaf 1)multi-line status unsupported in version $ver!" && exit 1
[ "$1" = "off" ] && tmux_status_reset
if [ "$1" = "on" ]; then
    tmux set status-interval 5
    tmux set status 2
    tmux_main_status        # set first line, which runs the master script
fi




######################## WIP #############################3

# add a timer and progress bar to status
tmux_delete_timer () { tmux set -u "@$1-start"; tmux set -u "@$1-duration"; }
tmux_create_timer () { tmux set -q "@$1-start" $(date +%s); tmux set -q "@$1-duration" $2; }
