#!/bin/sh

#####################################
# TMUX STATUS - customize and control a multi-line tmux status
#####################################

. ~/rams_dot_files/shell_core_tools.sh || { echo "could not find shell_core_tools.sh" && exit 1; }

caller=$0 cmds_defined tmux-version tmux-default-winlist tmux-status-render || exit 1

# set first line of tmux status for multi-line mode
tmux_main_status () {
    local tmux_mouse_mode="#[fg=brightyellow]#[bg=red]#{?mouse,MOUSEON,}#[default]"
    local tmux_sync_panes="#[fg=brightyellow]#[bg=red]#{?synchronize-panes,SYNCPANEON,}#[default]"
    local tmux_wind_bg_jobs="#[fg=brightyellow]#[bg=red]#(~/rams_dot_files/scripts/tmux_bg_jobs.sh)#[default]"
    local tmux_ssh_jmp="#[fg=brightyellow]#[bg=red]#(~/rams_dot_files/scripts/tmux_ssh_listen.sh)#[default]"
    local tmux_mounted_drive="#[fg=brightyellow]#[bg=red]#(~/rams_dot_files/scripts/mounted_drives.sh)#[default]"
    local tmux_wifi_ssid="#[fg=brightyellow]#[bg=red]#(~/rams_dot_files/scripts/check_wifi.sh)#[default]"
    local tmux_vpn_on="#[fg=brightyellow]#[bg=red]#(~/rams_dot_files/scripts/vpn_connected.sh)#[default]"

    local tmux_spotify="#[fg=colour208]#(osascript ~/rams_dot_files/scripts/spotify_song.scpt)"
    local hostname_ansi_color="${HOSTNAME_ANSI_COLOR:=011}"   # default to bright yellow if custom hostname color isnt specified
    local tmux_host_datetime="#[fg=colour${hostname_ansi_color}]#{host} #[fg=brightwhite]%Y-%m-%d #[fg=brightwhite]%H:%M"

    local left="#[fg=cyan]#S ${tmux_mouse_mode} ${tmux_sync_panes} ${tmux_wind_bg_jobs}\
 ${tmux_ssh_jmp} ${tmux_mounted_drive} ${tmux_wifi_ssid} ${tmux_vpn_on} "
    local right="#[align=right]${tmux_spotify}   ${tmux_host_datetime}"
    if [ -n "$simple" ]; then
        left="#[fg=cyan]#S ${tmux_mouse_mode} ${tmux_sync_panes}"
        right="#[align=right]  ${tmux_host_datetime}"
    fi

    # "#(~/rams_dot_files/tmux_status_bar.sh 2>&1)"
    local cmd="tmux"
    [ "$(detect_shell)" = "zsh" ] && cmd="noglob tmux" # for zsh '[]' globbing

    # eval "$cmd set status-format[0] \"#(~/rams_dot_files/scripts/tmux-status-render 2>&1)"\
    eval "$cmd set status-format[0] \"#(tmux-status-render 2>&1)"\
    "#[align=left]$left #[align=centre]$(tmux-default-winlist) #[align=right]$right\""
    #eval "$cmd set status-format[1] \"#(source ~/rams_dot_files/shell_functions.sh; tmux_test_data)\""
}

tmux_status_reset () {
    tmux set -u status-format[0]
    tmux set -u status
    tmux set -u status-interval
    tmux set -u status-left; tmux set -u status-right
    tmux set -u status-format
}

ver=$(tmux-version)
[ $(echo "$ver < 2.9" | bc) -eq 1 ] && \
    echo "$(tput setaf 1)multi-line status unsupported in version $ver!" && exit 1
[ "$1" = "off" ] && tmux_status_reset
if [ "$1" = "on" ]; then
    tmux set status-interval 5
    tmux set status 2
    tmux_main_status        # set first line, which runs the master script
fi




######################## WIP #############################3

# add a timer and progress bar to status
tmux_delete_timer () { tmux set -u "@$1-start"; tmux set -u "@$1-duration"; }
tmux_create_timer () { tmux set -q "@$1-start" $(date +%s); tmux set -q "@$1-duration" $2; }
