#!/bin/sh

# FRG: ripgrep and fzf+preview, preserving rg match color in preview (by using rg for preview too)
    # NOTE: -e needed in case of empty RG_FITLER string, rg thinks empty string is pattern query

# TODO: fix ctrl-space
usage () { echo "Usage: frg [ -h(help) ] [ -v(verbose) ] [ -f RG_FILTER ] [ -j FZF_HEIGHT ] [ -d RG_DIR ] PATTERN"; }

while getopts 'vhj:f:d:' x; do
    case $x in
        v) VERBOSE=1 ;;
        h) usage && exit 1 ;;
        j) FZF_HEIGHT="$OPTARG" ;;
        f) RG_FILTER="$OPTARG" ;;
        d) RG_DIR="$OPTARG" ;;
        *) usage && exit 1 ;;
    esac
done
shift $(($OPTIND - 1))

[ -z "$1" ] && echo "Need a string to search for!" && exit 1

RG_DIR=${FZF_DIR:=.}
FZF_HEIGHT=${FZF_HEIGHT:=100}

PREV_CMD="rg --pretty --context 10 -e '\$1' {}"
CMD="rg ${RG_FILTER} --files-with-matches --no-messages -e \"$1\" \"${RG_DIR}\""
CMD="$CMD | fzf +m --exit-0 --preview \"${PREV_CMD}\""
CMD="$CMD --height ${FZF_HEIGHT}% --header='ctrl-e->vim, ctrl-y->copy-clipboard, ctrl-space->cd'"
CMD="$CMD --bind 'ctrl-y:execute-silent(echo {} | smartcopy)+abort' --expect='ctrl-e,ctrl-space'"
OUT=$(eval "$CMD")

KEY=$(echo "$OUT" | head -1)
FILE=$(echo "$OUT" | tail -n+2)
if [ -n "$FILE" ]; then
    if [ "$KEY" = "ctrl-space" ]; then
        echo "dir name: $(dirname "$FILE")"
        cd "$(dirname "$FILE")"
    elif [ "$KEY" = "ctrl-e" ]; then
        eval "${EDITOR:-vim} -p "$FILE""
    else
        echo "$FILE"
    fi
fi
