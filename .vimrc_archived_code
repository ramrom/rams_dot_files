"NOTE: will detect .txt files with `***` chars in first line as robot
Plug 'mfukar/robotframework-vim'    "more recent, i think forked from costallet user

"""""""" RELOADING BUFFERS CHANGED OUTSIDE OF VIM SESSION """""""""""""""""
" autoread alone doesn't really work, triggers on external commands
    " https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
    " https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
function BetterAutoRead()
    "au FocusGained,BufEnter * :silent! !
    set autoread

    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif

    " Notification after file change (https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread)
    autocmd FileChangedShellPost *
      \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
endfunction

if empty($VIM_NO_AUTOREAD) | call BetterAutoRead() | endif


""""""""""""""""""" "set a custom tab line, each tab prefixed with tab index
set tabline=%!MyTabLine()  " custom tab pages line\
function MyTabLine()
        let s = '' " complete tabline goes here
        " loop through each tab page
        for t in range(tabpagenr('$'))
                " set highlight\
                if t + 1 == tabpagenr()
                        let s .= '%#TabLineSel#'
                else
                        let s .= '%#TabLine#'
                endif
                " set the tab page number (for mouse clicks)\
                let s .= '%' . (t + 1) . 'T'
                let s .= ' '
                " set page number string\
                let s .= t + 1 . ' '
                " get buffer names and statuses\
                let n = ''      "temp string for buffer names while we loop and check buftype\
                let m = 0       " &modified counter
                let bc = len(tabpagebuflist(t + 1))     "counter to avoid last ' '\
                " loop through each buffer in a tab
                for b in tabpagebuflist(t + 1)
                        " buffer types: quickfix gets a [Q], help gets [H]\{base fname\}\
                        " others get 1dir/2dir/3dir/fname shortened to 1/2/3/fname\
                        if getbufvar( b, "&buftype" ) == 'help'
                                let n .= '[H]' . fnamemodify( bufname(b), ':t:s/.txt$//' )
                        elseif getbufvar( b, "&buftype" ) == 'quickfix'
                                let n .= '[Q]'
                        else
                                let n .= pathshorten(bufname(b))
                        endif
                        " check and ++ tab's &modified count\
                        if getbufvar( b, "&modified" )
                                let m += 1
                        endif
                        " no final ' ' added...formatting looks better done later\
                        if bc > 1
                                let n .= ' '
                        endif
                        let bc -= 1
                endfor
                " add modified label [n+] where n pages in tab are modified\
                if m > 0
                        let s .= '[' . m . '+]'
                endif
                " select the highlighting for the buffer names\
                " my default highlighting only underlines the active tab\
                " buffer names.\
                if t + 1 == tabpagenr()
                        let s .= '%#TabLineSel#'
                else
                        let s .= '%#TabLine#'
                endif
                " add buffer names\
                if n == ''
                        let s.= '[New]'
                else
                        let s .= n
                endif
                " switch to no underlining and add final space to buffer list\
                let s .= ' '
        endfor
        " after the last tab fill with TabLineFill and reset tab page nr\
        let s .= '%#TabLineFill#%T'
        " right-align the label to close the current tab page\
        if tabpagenr('$') > 1
                let s .= '%=%#TabLineFill#%999Xclose'
        endif
        return s
endfunction

" OLD ESCAPE replacement
" much faster than escape, almost never hit jk successively in insert, jj might be good too
inoremap jk  <Esc>


"Quickly switch between up to 9 vimtabs
let i=0
while i<10
  exe 'map g'.i.' :tabn '.i.'<CR>'
  let i+=1
endwhile

"""""""""""""""""""CTRLP Fuzzyfinder"""""""""""""""""""""""
let g:ctrlp_max_files = 20000
let g:ctrlp_max_height = 20
let g:ctrlp_dotfiles = 1
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$',
  \ 'file': '\.exe$\|\.so$\|\.dll$',
  \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
  \ }

" ignore compiled scala/java files, added so CtrlP will ignore these files
set wildignore+=*/target/*
