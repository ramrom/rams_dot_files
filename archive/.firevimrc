set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-surround'       " add/change/remove surrounding formatting to text-objects
Plug 'tpope/vim-repeat'         " `.` operator on crack, works with vim-surround
Plug 'tpope/vim-commentary'     " smart code commenting
Plug 'glacambre/firenvim', { 'do': { _ -> firenvim#install(0) } }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } " NOTE/FIXME: vim 7.4 doesnt like this syntax
Plug 'junegunn/fzf.vim'
call plug#end()

let g:firenvim_config = {
    \ 'globalSettings': {
        \ 'alt': 'all',
    \  },
    \ 'localSettings': {
        \ '.*': {
            \ 'cmdline': 'neovim',
            \ 'content': 'text',
            \ 'priority': 0,
            \ 'selector': 'textarea',
            \ 'takeover': 'always',
        \ },
    \ }
\ }

au BufEnter github.com_*.txt set filetype=markdown
au BufEnter json.parser.online.fr_*.txt set filetype=json


""""""""" CORE SETTINGS """"""""""""""

set splitbelow splitright       " open new windows on bottom for horizontal, right for vertical
set wildmenu                    " display command line's tab complete options as menu
set wildmode=longest,list,full  " complete longest common, list all matches, complete till next full match
set number                      " line numbers
set backspace=indent,eol,start  " backspace like most wordprocessors in insert mode
set laststatus=0
set linebreak                   " avoid wrapping line in middle of a word
set wrap                        " wrap lines longer than width to next line
set foldmethod=indent
set nofoldenable            " dont fold everything when opening buffers

set autoindent              " indent on new line for inner scopes in code
set shiftwidth=4            " use 4 spaces for autoindent (cindent)
set tabstop=4               " space 4 columns when reading a <tab> char in file
set softtabstop=4           " complicated, see docs
set expandtab               " use spaces when tab is pressed

set listchars=tab:»_,trail:·


""""" FUNCTIONS """""""""""""""
function RemoveTrailingWhiteSpace()
    execute '%s/\s\+$//e'
endfunction

function TabBufQuit()
    if !exists('*gettabinfo') | execute ":q" | return | endif   " vim 7.4(and earlier) dont have `gettabinfo`
    let tinfo=gettabinfo()
    if len(tinfo) == 1 && len(tinfo[0]['windows']) == 1
        if len(getbufinfo({'buflisted':1})) == 1 | exe ":q" | else | exe ":bd" | endif
    else | exe ":q" | endif
endfunction

" if there is one tab, move forward/back buffer, otherwise forward/back tabs
function TabBufNav(direction)
    if !exists('*gettabinfo')  " vim 7.4(and earlier) dont have `gettabinfo`
        if (a:direction == "f") | execute ":tabn" | else |  execute ":tabprevious" | endif
        return
    endif
    if len(gettabinfo()) == 1
        if (a:direction == "f") | execute ":bn!" | else |  execute ":bp!" | endif
    else
        if (a:direction == "f") | execute ":tabn" | else |  execute ":tabprevious" | endif
    endif
endfunction


""""""""""""" MAPPINGS """""""""""""""""""""""""""""
let mapleader = " "

inoremap <C-l>  <Esc>

" Move between tabs(or buffers if one tab)
noremap <leader>f :call TabBufNav("f")<CR>
noremap <leader>d :call TabBufNav("b")<CR>

" Move between windows
" default mappings: ctrl-l refreshes screen, ctrl-h backspace, ctrl-j down one line, ctrl-k digraph
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k

noremap <leader>s :w<cr>
noremap <leader>q :call TabBufQuit()<cr>
noremap <leader>Q :q!<cr>
noremap <leader><leader>q :qa<cr>
noremap <leader>j :noh<cr>
nnoremap <leader>e :call firenvim#focus_page()<CR>

noremap <leader>cm :Maps<cr>
noremap <leader>; :Commands<cr>
noremap <leader>r :History:<cr>
noremap <leader>cv :vsplit ~/rams_dot_files/cheatsheets/vim_cheatsheet.md<cr>
noremap <leader>cV :tabnew ~/rams_dot_files/cheatsheets/vim_cheatsheet.md<cr>

noremap <leader>ga :call RemoveTrailingWhiteSpace()<CR>
